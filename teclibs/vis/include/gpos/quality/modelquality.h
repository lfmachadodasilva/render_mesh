// Reservoir model quality validator.
// rodesp@tecgraf.puc-rio.br
// Tecgraf/PUC-Rio
// Jun 2011

#ifndef GPOS_QUALITY_MODELQUALITY_H
#define GPOS_QUALITY_MODELQUALITY_H

#include <stdio.h>
#include <gpos/defines.h>
#include <tops/model.h>
#include <alg/vector.h>
#include <ds/array.h>
#include <utl/sort.h>

class ResModel;
class ResModelNew;
class ResProperty;
class ResRawMapProperty;

/**
 * Validates a reservoir model based on a set of quality parameters.
 *
 * Model properties are validated separately. Validation results 
 * can be acessed after the corresponding property has been validated.
 * 
 * Quality parameters are assumed to be in the "imex_modsi" unit system.
 */
class RES_API ResModelQuality
{
public:
  enum ErrorCode {
    ERROR_NONE = 0,
    ERROR_MISSING_POROSITY,
    ERROR_MISSING_PERMX,
    ERROR_MISSING_PERMY,
    ERROR_MISSING_PERMZ,
    ERROR_MISSING_VOLMOD,
    ERROR_MISSING_NTG
  };

  static const char* VALID_CELL_COORDS_PROP_SYMBOL;
  static const char* VALID_POROUS_VOLUME_PROP_SYMBOL;
  static const char* PINCHED_OUT_PROP_SYMBOL;
  static const char* POROUS_VOLUME_PROP_SYMBOL;

  ResModelQuality (ResModelNew* modelnew);

  ~ResModelQuality ();

  ResModelNew* GetModel () const;

  /**
   * Sets whether only active cells will be considered.
   * Default: true
   */
  void SetActiveOnly (bool active_only);

  /**
   * Gets the last error code generated by this object and clears the error
   * indicator flag. Otherwise, returns ERROR_NONE.
   */
  ErrorCode GetAndClearError ();

  /**
   * Returns whether an error has happened during a previous execution
   * of any of the methods of this class.
   *
   * Must check for errors after method executions.
   */
  bool HasError ();

  /**
   * Computes the value of PVCUTOFF based on the given percentage of
   * the total porous volume.
   * The PVCUTOFF corresponds to the minimum porous volume value required for
   * the reservoir cells. Cells with porous volume under PVCUTOFF are expected
   * to be disregarded (or deactivated) by the simulator.
   */
  float ComputePVCUTOFF (float percentage_of_total_pvol);

  /**
   * Computes the percentage of the total porous volume corresponding to ths
   * sum of the porous volumes of the cells that are below pvcutoff.
   */
  float ComputePercentageOfTotalPorousVolumeBelowPVCUTOFF (float pvcutoff);

  /** 
   * Gets the total porous volume computed for the reservoir model.
   */
  float GetTotalPorousVolume ();

  /**
   * Gets the porous volume of a cell.
   */
  float GetCellPorousVolume (int cell_index);

  /**
   * Computes the Jacobian determinant of reservoir cells.
   */
  void GetGridJacobianDeterminant (float* o_min_det,
                                   float* o_max_det,
                                   float* o_mean_det);

  /**
   * Gets the minimum, maximum and mean values of the determinant of the 
   * Jacobian matrix throughout a reservoir cell.
   * The Jacobian of a reservoir cell is the matrix of the derivatives of 
   * the shape function corresponding to the 8-node linear cell. It provides the
   * scale and shape factors of the mapping of a canonic cell defined in a parametric
   * coordinate space onto the actual physical cell in the cartesian space.
   */
  void GetCellJacobianDeterminant (int cell_index, 
                                   float* o_min_det, 
                                   float* o_max_det, 
                                   float* o_mean_det);

  /**
   * Generates a map property of the Jacobian determinant of reservoir cells
   * and adds it to the current ResModelNew as an extra property. 
   */
  void GenerateMinJacobianDeterminantMapProperty ();

  /**
   * Generates a map property of the Jacobian determinant of reservoir cells
   * and adds it to the current ResModelNew as an extra property.
   */
  void GenerateValidJacobianDeterminantMapProperty ();

  /**
   * Generates a map property of the Jacobian determinant of reservoir cells
   * and adds it to the current ResModelNew as an extra property. 
   */
  void GenerateCellVolumeMapProperty ();

  /**
   * Generates a map property of the porous volumes of reservoir cells
   * and adds it as an extra property of the current ResModelNew.
   */
  void GeneratePorousVolumeMapProperty ();

  /***********************
   * Validation methods
   ***********************/
  /**
   * Validates the coordinates of reservoir cells.
   *
   * A cell are valid if the lengths of its edges (dx, dy, dz),
   * along x, y and z directions, are in the given boundaries.
   */
  void ValidateCellCoordinates (float dx_min, float dx_max,
                                float dy_min, float dy_max,
                                float dz_min, float dz_max);

  /**
   * Validates porosities of reservoir cells.
   * 
   * A cell is valid if its porosity is in the valid the given boundaries.
   */
  void ValidatePorosity (float phi_min, float phi_max);

  /**
   * Validates permeability X of reservoir cells.
   * 
   * A cell is valid if permx is in the given boundaries.
   */
  void ValidatePermeabilityX (float permx_min, float permx_max);

  /**
   * Validates permeability Y of reservoir cells.
   * 
   * A cell is valid if permy is in the given boundaries.
   */
  void ValidatePermeabilityY (float permy_min, float permy_max);

  /**
   * Validates permeability Z of reservoir cells.
   * 
   * A cell is valid if permz is in the given boundaries.
   */
  void ValidatePermeabilityZ (float permz_min, float permz_max);

  /**
   * Determines whether porous volume of reservoir cells are all valid.
   *
   * Porous volume is valid if the summation of reservoir cell porous volumes that
   * are less than PVCUTOFF is less than the given percentage of the
   * total porous volume.
   */
  void ValidatePorousVolume (float pvcutoff, float percentage);

  /**
   * Determines whether the height (dz) of all reservoir cells is greater than
   * the pinchout tolerance value.
   */
  void ValidatePinchoutTol (float pinchout_tol);

  /************************
   * Validation results 
   *
   * Require a previous call to the corresponding validation method.
   ************************/
  /**
   * Clears all validation results.
   */
  void ClearValidationResults ();

  /**
   * Generates map properties for the existing validation results.
   */
  void GenerateValidationResultsMapProperties ();

  /**
   * Clears map properties corresponding to the existing validation results.
   */
  void ClearValidationResultsMapProperties ();

  /**
   * Returns whether cell coordinates have been validated.
   */
  bool HasCellCoordinatesValidationResults ();

  /**
   * Returns whether the coordinates of every cell are valid.
   */
  bool AreCellCoordinatesValid ();

  /** 
   * Requires ValidateCellCoordinates() 
   * Gets the number of cells with invalid coordinates.
   */
  int GetInvalidCellCoordinatesCount ();

  /** 
   * Requires ValidateCellCoordinates() 
   * Gets the value of the i'th cell with invalid cooordinates.
   */
  void GetInvalidCellCoordinates (int i, 
                                  int* o_cell_index,
                                  bool* o_is_dx_valid, 
                                  bool* o_is_dy_valid, 
                                  bool* o_is_dz_valid, 
                                  float* o_dx,
                                  float* o_dy,
                                  float* o_dz);

  /**
   * Returns whether porosity has been validated.
   */
  bool HasPorosityValidationResults ();

  /**
   * Returns whether the porosity of every cell is valid.
   */
  bool IsPorosityValid ();

  /** 
   * Requires ValidatePorosities() 
   * Gets the number of cells with invalid porosity.
   */
  int GetInvalidPorosityCount ();

  /** 
   * Requires ValidatePorosities() 
   * Gets the value of the i'th cell with invalid porosity.
   */
  void GetInvalidPorosity (int i, int* o_cell_index, float* o_value);

  /**
   * Returns whether permx has been validated.
   */
  bool HasPermeabilityXValidationResults ();

  /**
   * Returns whether the permeability X of every cell is valid.
   */
  bool IsPermeabilityXValid ();

  /** 
   * Requires ValidatePermeabilityX() 
   * Gets the number of cells with invalid permx.
   */
  int GetInvalidPermeabilityXCount ();

  /** 
   * Requires ValidatePermeabilityX() 
   * Gets the value of the i'th cell with invalid permx.
   */
  void GetInvalidPermeabilityX (int i, int* o_cell_index, float* o_value);

  /**
   * Returns whether permy has been validated.
   */
  bool HasPermeabilityYValidationResults ();

  /**
   * Returns whether the permeability Y of every cell is valid.
   */
  bool IsPermeabilityYValid ();

  /** 
   * Requires ValidatePermeabilityY() 
   * Gets the number of cells with invalid permy.
   */
  int GetInvalidPermeabilityYCount ();

  /** 
   * Requires ValidatePermeabilityY() 
   * Gets the value of the i'th cell with invalid permy.
   */
  void GetInvalidPermeabilityY (int i, int* o_cell_index, float* o_value);

  /**
   * Returns whether permz has been validated.
   */
  bool HasPermeabilityZValidationResults ();

  /**
   * Returns whether the permeability Z of every cell is valid.
   */
  bool IsPermeabilityZValid ();

  /** 
   * Requires ValidatePermeabilityZ() 
   * Gets the number of cells with invalid permz.
   */
  int GetInvalidPermeabilityZCount ();

  /** 
   * Requires ValidatePermeabilityZ() 
   * Gets the value of the i'th cell with invalid permz.
   */
  void GetInvalidPermeabilityZ (int i, int* o_cell_index, float* o_value);

  /**
   * Returns whether porous volume has been validated.
   */
  bool HasPorousVolumeValidationResults ();

  /**
   * Returns whether the porous volume is valid.
   */
  bool IsPorousVolumeValid ();

  /** 
   * Requires ValidatePorousVolume() 
   * Gets the total porous volume
   */
  float GetTotalPorousVolumeBelowCutoff ();

  /**
   * Returns whether pinchout tolerance has been validated.
   */
  bool HasPinchoutTolValidationResults ();

  float ComputeCellVolume (TopElement cell);

private:
  struct InvalidCellCoords
  {
    int index;
    bool is_dx_valid;
    bool is_dy_valid;
    bool is_dz_valid;
    float dx;
    float dy;
    float dz;
  };

  struct CellValue
  {
    CellValue () {}
    CellValue (int index, float value)
    : index(index)
    , value(value)
    {
    }
    int index;
    float value;
  };

  class CellValueCompareFunctor 
  {
  public:
    CellValueCompareFunctor ()
    : m_data(NULL)
    {
    }

    CellValueCompareFunctor (const CellValue* data)
    : m_data(data)
    {
    }

    UTL_FORCE_INLINE int operator() (CellValue data1, CellValue data2) const
    {
      if (data1.value <  data2.value)
        return -1;
      else if (data1.value > data2.value)
        return 1;
      else
        return 0;
    }
  private:
    const CellValue* m_data;
  };

private:
  void SetError (ErrorCode e)
  {
    m_error = e;
  }

  /**
   * Generates a map property of the validity of the geometry of reservoir cells
   * and adds it as an extra property of the current ResModelNew.
   */
  void GenerateValidCellCoordinatesMapProperty ();

  /**
   * Generates a map property of the validity of the geometry of reservoir cells
   * and adds it as an extra property of the current ResModelNew.
   */
  void GenerateValidPorousVolumesMapProperty ();

  /**
   * Generates a map property of the reservoir cells which heights
   * are greater than or equal a given pinchout tolerance.
   */
  void GenerateValidPinchoutTolMapProperty ();

  float ComputeJacobianDeterminant (const AlgVector vertices[8], 
                                    float xi, float eta, float zeta);

  void ComputeJacobian (const AlgVector vertices[8], 
                        float xi, float eta, float zeta,
                        float o_jac[3][3]);

  void ComputeShapeFunctionDerivatives (float xi, float eta, float zeta,
                                        float o_dshape[3][8]);

  bool UpdateCellPorousVolumes ();

  float ComputeCellPorousVolume (TopElement cell,
                                 ResProperty* porosity_prop,
                                 ResProperty* volmod_prop,
                                 ResProperty* netgross_prop);

  void UpdateGeometryUnitConversionFactors ();

  bool AreCellCoordsValid (TopElement cell,
                           float dx_min, 
                           float dx_max,
                           float dy_min, 
                           float dy_max,
                           float dz_min, 
                           float dz_max,
                           bool* o_is_dx_valid, 
                           bool* o_is_dy_valid,
                           bool* o_is_dz_valid,
                           float* o_invalid_dx,
                           float* o_invalid_dy,
                           float* o_invalid_dz);

  bool IsCellDZValid (TopElement cell, 
                      float dz_min, 
                      float dz_max,
                      float* o_invalid_dz);

  bool IsCellDZValid (AlgVector vertices[8], 
                      float dz_min, 
                      float dz_max,
                      float* o_invalid_dz);

  void GetCellCoordsInMeters (TopElement cell, AlgVector vertices[8]);

  ResRawMapProperty* CreateInitialMapProperty (const char* symbol,
                                               const char* desc,
                                               const char* unit);

private:
  ResModel* m_model;
  bool m_active_only;
  ErrorCode m_error;
  double m_coord_conv_factor_mult;
  double m_coord_conv_factor_add;
  DsArray<float> m_cell_porous_volumes;
  float m_total_porous_volume;
  bool m_cell_porous_volumes_outdated;

  /*************************
   * Validation inputs
   *************************/
  // Cell coordinates
  float m_validate_cell_coords_dx_min;
  float m_validate_cell_coords_dx_max;
  float m_validate_cell_coords_dy_min;
  float m_validate_cell_coords_dy_max;
  float m_validate_cell_coords_dz_min;
  float m_validate_cell_coords_dz_max;
  // Porosity
  float m_validate_porosity_phi_min;
  float m_validate_porosity_phi_max;
  // PermX
  float m_validate_permx_min;
  float m_validate_permx_max;
  // PermY
  float m_validate_permy_min;
  float m_validate_permy_max;
  // PermZ
  float m_validate_permz_min;
  float m_validate_permz_max;
  // Porous volume
  float m_validate_porous_volume_pvcutoff;
  float m_validate_porous_volume_percentage;
  // Pinchout tolerance
  float m_validate_pinchout_tol;

  /*************************
   * Validation results 
   *************************/
  // Cell coordinates
  bool m_has_cell_coords_results;
  bool m_are_cell_coords_valid;
  DsArray<InvalidCellCoords> m_invalid_cell_coords;
  // Porosity
  bool m_has_porosity_results;
  bool m_is_porosity_valid;
  DsArray<CellValue> m_invalid_porosities;
  // PermX
  bool m_has_permx_results;
  bool m_is_permx_valid;
  DsArray<CellValue> m_invalid_permx;
  // PermY
  bool m_has_permy_results;
  bool m_is_permy_valid;
  DsArray<CellValue> m_invalid_permy;
  // PermZ
  bool m_has_permz_results;
  bool m_is_permz_valid;
  DsArray<CellValue> m_invalid_permz;
  // Porous volume
  bool m_has_porous_volume_results;
  bool m_is_porous_volume_valid;
  DsArray<CellValue> m_invalid_porous_volumes;
  float m_total_porous_volume_below_cutoff;
  // Pinchout tolerance
  bool m_has_pinchout_tol_results;
};

#endif