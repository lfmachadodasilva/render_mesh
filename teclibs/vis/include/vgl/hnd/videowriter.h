//* videowriter.h
// fabraham@tecgraf.puc-rio.br
// Tecgraf/PUC-Rio
// June 2004

#ifndef VGL_IMAGEWRITER_H
#define VGL_IMAGEWRITER_H

#include <vgl/handler.h>
#include <ds/array.h>
#include <ds/queue.h>
#include <ds/pool.h>
#ifdef MULTITHREAD
#include <pthread.h>
#endif
#include <im.h>
#include <vgl/vglim.h>

class VglCanvas;
class VglPBufferCanvas;

/**
 * Video Writer Handler.
 * This handler will record the frames generated by the application.
 * At the end of recording, it is possible to save the video in the
 * formats supported by IM.
 *
 * The handler will readback what was rendered by the application
 * in an AfterRedraw event and will either encode it as a frame in a
 * video or save it into temporary files for later encoding.
 * 
 * Methods provided for on-the-fly encoding (Windows only):
 * - choosing video filename;
 * - begin/end recording
 *
 * Methods provided for offline encoding:
 * - configure the temporary files directory (it is advised to use a
 * directory with the fastest possible writing performance).
 * - configure the maximum application frame rate: controls the frame
 * rate so that the frames will be separated by a constant time
 * (required for the resulting video to be smooth).
 * - save the video.
 */
class VGLIMAPI VglVideoWriter : public VglHandler
{
public:
  /**
   * Video end callback type.
   */  
  typedef void (*VideoEndFunc)(VglVideoWriter *writer, void *data);
private:
  VglCanvas* m_canvas;
  int m_frameindex;
  char* m_tempdir;
  char* m_basefilename;
  char *m_videofilename;
  float m_fps;
  float m_quality;
  char *m_codec;
  double m_last_t;
  double m_maxfps;
  int m_width, m_height;
  int m_repeat;
  VideoEndFunc m_endfunc;
  void *m_enddata;
  // members for deferred encoding
  typedef struct
  {
    DsArray<unsigned char> *buffer;
    int width;
    int height;
    int index;
  } Buffer;
  DsPool<DsArray<unsigned char> > m_bufferpool;
  DsQueue<Buffer*> m_bufferqueue;
  bool m_write_with_im;
#ifdef MULTITHREAD
  pthread_mutex_t m_mutexpool;
  pthread_mutex_t m_mutexqueue;
  pthread_cond_t m_condqueuenotempty;
  pthread_cond_t m_condqueuenotfull;
#endif
  // members for realtime encoding
  imFile *m_videofile;
  DsArray<unsigned char> m_buffer;
  bool m_encodelater;
  bool m_paused;
  bool m_usemaxfps;
  bool m_recording;
  bool m_handlekeyboard;
  bool m_record_native_redraw;
  // private methods
  bool BeginRecording ();
  void EndRecording ();
  DsArray<unsigned char>* CreateBuffer (int size);
  void ReleaseBuffer (Buffer *b);
  void MustWriteBuffer (DsArray<unsigned char> *buffer, int w, int h, int index);
  bool WriteBuffer (Buffer *buffer);
  static bool Init ();
public:
#ifdef MULTITHREAD
  void WriteThread ();
#endif
  static const char* CLASSNAME () { return "VideoWriter"; }
  virtual const char* ClassName () const { return CLASSNAME(); }

  /**
   * Obtains the number of available video formats for online encoding.
   *
   * Only useful for online encoding.
   */
  static int GetNumAvailableVideoFormats ();
  /**
   * Obtains the 'index'th available video format.
   *
   * Only useful for online encoding.
   */
  static const char *GetVideoFormat (int index);
  /**
   * Obtains the 'index'th available video format description.
   *
   * Only useful for online encoding.
   */
  static const char *GetVideoFormatDesc (int index);
  /**
   * How many available codecs (excluding "CUSTOM") for online encoding of 
   * the given video format are available ?
   *
   * Only useful for online encoding.
   */
  static int GetNumAvailableCodecs (const char *videoformat);
  /**
   * DEPRECATED 
   *
   * How many available codecs for online encoding (excluding "CUSTOM")
   * are available ?
   *
   * Only useful for online encoding.
   */
  DS_DEPRECATED static int GetNumAvailableCodecs ();
  /**
   * Obtains the 'index'th available codec (excluding "CUSTOM") for the 
   * given video format. 
   *
   * Only useful for online encoding.
   */
  static const char *GetCodec (const char *videoformat, int index);
  /**
   * DEPRECATED
   *
   * Obtains the 'index'th available codec. (excluding "CUSTOM")
   *
   * Only useful for online encoding.
   */ 
  DS_DEPRECATED static const char *GetCodec (int index);
  /**
   * Obtains the 'index'th available codec description (excluding "CUSTOM") 
   * for the given video format. 
   *
   * Only useful for online encoding.
   */
  static const char *GetCodecDesc (const char *videoformat, int index);
  /**
   * DEPRECATED
   *
   * Obtains the 'index'th available codec description. (excluding "CUSTOM")
   *
   * Only useful for online encoding.
   */ 
  DS_DEPRECATED static const char *GetCodecDesc (int index);
  /**
   * Constructor. 'canvas' is the canvas that will have its image recorded on the video.
   */
  VglVideoWriter (VglCanvas* canvas);
  /**
   * Destructor.
   */
  virtual ~VglVideoWriter ();
  /**
   * Specifies if the keyboard events ('k' starts video, 'K' ends video)
   * should be handled. (default=true)
   */
  void SetHandleKeyboard (bool flag)
  {
    m_handlekeyboard = flag;
  }
  /**
   * Specifies if the encoding should be done offline (after the
   * recording stops).
   *
   * Currently, this is the only option outside Windows environments.
   */
  void SetOfflineEncoding (bool flag)
  {
    m_encodelater = flag;
#ifndef _WIN32
    if (!m_encodelater)
      printf("VGLIM: SetOfflineEncoding(false) is only supported on Windows.\n");
    m_encodelater = true;
#endif
  }
  void SetEncodeLater (bool flag)
  {
    SetOfflineEncoding(flag);
  }
  /*
  void SetMaxFPS (bool f, double fps=0.0)
  {
    m_usemaxfps = f;
    if (fps > 0.0)
      m_maxfps = fps;
  }
  */
  /*
  ///
   * Returns the advised frame rate for video saving.
   * In case a maximum frame rate was specified, returns this value.
  ///
  double GetSaveFPS ()
  {
    return m_usemaxfps ? m_maxfps : 24.0;
  }
  */
  /**
   * Configures the video writer to repeat the current frame 'numtimes' times.
   * Useful for images that must appear in the video for a number of seconds.
   * The default value is 1.
   *
   * Only used in online encoding mode.
   */
  void SetRepeat (int numtimes)
  {
    m_repeat = numtimes;
  }
  /**
   * Configures the video writer whether it will record frames rendered
   * during native redraws.
   */
  void SetRecordNativeRedraw(bool f)
  {
    m_record_native_redraw = f;
  }
  /**
   * Specifies the video format used for online encoding.
   * The video format must have been obtained through GetVideoFormat().
   * The default video format is "AVI".
   *
   * Attributes are only used in online encoding mode.
   */
  void SetVideoFormat (const char *format);
  /**
   * Specifies the video attributes: filename, framerate, quality and codec.
   * 'quality' must be between 0 and 1 (100% quality).
   * If 'quality' is -1.0f, uses a default quality.
   * The codec must have been obtained through GetCodec() or be "CUSTOM"
   * (user dialog pops).
   *
   * The "CUSTOM" codec option is only valid for the AVI video format.
   *
   * Attributes are only used in online encoding mode.
   */
  void SetVideoAttributes (char *videofilename, float fps, float quality = -1.0f, const char *codec="CUSTOM");
  /**
   * Specifies if the temporary files must be written in the 'PNG' format
   * (lossless compression, generates small files without loss of quality)
   * 
   * Only useful in offline encoding.
   */
  void SetWriteWithIM (bool f)
  {
    m_write_with_im = f;
  }
  /**
   * Configures the directory into which the temporary files will be saved. Default=".".
   * 
   * Only useful in offline encoding.
   */
  void SetTemporaryDir (const char* directory); 
  /**
   * Configures the base temporary file filename. Default="vgl".
   * 
   * Only useful in offline encoding.
   */
  void SetBaseTempFileName (const char* filename);
  /**
   * Specifies the format for frames saved with IM (offline encoding). Default="PNG".
   */
  void SetFramesFormat (const char* format);
  /**
   * Specifies the index of the first frame (offline encoding). Default=0.
   */
  void SetFirstFrameIndex (int index);
  /**
   * Specifies the frame size for offline encoding. If specified, requests the drawing
   * of the scene twice (once for the VglCanvas, once again for generating this frame.
   * If w and h are -1 or this is not called, uses the canvas size.
   */
  void SetFramesSize (int w, int h);
  /**
   * Specifies the level of anti-aliasing for offline encoding. Default=1.
   * Used only if frame size is specified.
   */
  void SetFramesAntiAliasingNumSamples (int numsamples);
  /**
   * Specifies a function that will be called before rendering a video frame.
   * Only used if the frame size is different from the canvas size.
   */
  void SetBeforeVideoRenderFunc (VglFunction func, void* data)
  {
    m_before_video_render_func      = func;
    m_before_video_render_func_data = data;
  }
  /**
   * Specifies a function that will be called after rendering a video frame.
   * Only used if the frame size is different from the canvas size.
   */
  void SetAfterVideoRenderFunc (VglFunction func, void* data)
  {
    m_after_video_render_func      = func;
    m_after_video_render_func_data = data;
  }
  /**
   * Starts the video recording.
   */
  virtual bool Record ()
  {
    return BeginRecording();
  }
  /**
   * Pauses/Unpauses the video recording.
   */
  virtual void Pause ()
  {
    m_paused = !m_paused;
  }
  /**
   * Stops the video recording.
   */
  virtual void Stop ()
  {
    EndRecording();
  }
  /**
   * Configures the video end callback.
   * 'data' will be passed as parameter to the callback.
   */
  void SetVideoEndFunc (VideoEndFunc func, void *data)
  {
    m_endfunc = func;
    m_enddata = data;
  }
  /**
   * Specifies if video frame size must be adjusted to have a width
   * that is a multiple of 8.
   * This flag must be set before the video begins recording.
   *
   * Default: true
   */
  void SetAdjustWidth (bool f)
  {
    m_adjust_width = f;
  }
  /**
   * Saves the video with filename 'videofilename', framerate 'fps',
   * quality 'quality' and codec.
   * 'quality' must be between 0 and 1.
   * If 'quality' is -1.0f, uses a default quality.
   * The codec must have been obtained through GetCodec() or be "CUSTOM"
   * (user dialog pops).
   * Returns if the save operation was successful.
   *
   * Must only be used in offline encoding.
   */
  bool Save (const char *videofilename, float fps=24.0f, float quality=-1.0f, const char *codec="CUSTOM");
  virtual int Keyboard (int k, int st, float x, float y);
  virtual int AfterRedraw ();
private:
  bool IsAdjustingWidth () const
  {
    return m_adjust_width;
  }
private:
  char* m_videoformat;
  char* m_frames_format;
  char* m_frames_format_ext;
  VglPBufferCanvas* m_pbuffer_canvas;
  int m_frames_width;
  int m_frames_height;
  int m_frames_numsamples;
  int m_first_frame_index;
  VglFunction m_before_video_render_func;
  void* m_before_video_render_func_data;
  VglFunction m_after_video_render_func;
  void* m_after_video_render_func_data;
  bool m_adjust_width;
};

#endif
