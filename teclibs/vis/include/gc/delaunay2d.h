#ifndef GC_DELAUNAY_TRIANGULATION_2D_H
#define GC_DELAUNAY_TRIANGULATION_2D_H

// Inputs:
// -------
// points     - Point array
// size       - Point array size (consider from point 0 to size-1)
// firstPoint - Index of the first array point to be considered
// lastPoint  - Index of the last array point to be considered
// method     - Delaunay triangulation algorithm to use
//
// Outputs:
// --------
// hEdges        - Delaunay halfedge array (passed by reference, internally allocated)
//                 (only generated by some methods)
// triangles     - Delaunay triangle array (passed by reference, internally allocated)
//                 (only generated by some methods) (if NULL, dont generate triangles)
// numHEdges     - Number of generated halfedges
// numTriangles  - Number of generated triangles
// numUsedPoints - Number of points after discarding duplicates
//
// size considerations:
// --------------------
// Input points = n
// Hull points  = h
// HalfEdges    = 2*(3*(n-1)-h)
// triangles    = 2*(n-1)-h

//-----------------------------------------//
// Includes and Forward Class Declarations //
//-----------------------------------------//

#include "defines.h"

class gcVertex2D;
class gcHalfEdge2D;
class gcTriangle2D;

//---------//
// Defines //
//---------//

// Solving Methods                         method Name                           Expected    Worst-Case   10kp-Tri 10kp-Crc 10kp-Brd 1Mp-Tri      1Mp-Crc

enum GCDelaunay2DMethod
{
  GC_DELAUNAY_SELECTION_TRIANGLES = 1,  // Selection (triangles only)            O(n^2)      O(n^2)       30.6s    30.6s    30.6s    >10m         >10m
  GC_DELAUNAY_SELECTION_HALFEDGES = 2,  // Selection (hEdges [and triangles])    O(n^2)      O(n^2)       21.3s    21.3s    21.3s    >10m         >10m
  GC_DELAUNAY_MERGE_DEPTH         = 3,  // Merge Delaunay (Depth) (HEs/[Tris])   O(n*log(n)) O(n*log(n))  0.10s    0.10s    0.03s    12.5s[15.7s] 13.0s[16.1s]
  GC_DELAUNAY_MERGE_BREADTH       = 4,  // Merge Delaunay (Breadth) (HEs/[Tris]) O(n*log(n)) O(n*log(n))  0.10s    0.10s    0.03s    14.7s[15.9s] 15.3s[16.4s]
  GC_DELAUNAY_NUM_METHODS         = 4,
};

//------------------------//
// Direct Solving Methods //
//------------------------//

// Generating triangulation halfedges and triangles into new tight arrays without altering the original points.

GC_API bool gcDelaunay2DFit (gcVertex2D* points[], int size, gcHalfEdge2D** hEdges[], gcTriangle2D** triangles[], int &numHEdges, int &numTriangles, int &numUsedPoints, GCDelaunay2DMethod method = GC_DELAUNAY_MERGE_DEPTH);
GC_API bool gcDelaunay2DFit (gcVertex2D* points[], int firstPoint, int lastPoint, gcHalfEdge2D** hEdges[], gcTriangle2D** triangles[], int &numHEdges, int &numTriangles, int &numUsedPoints, GCDelaunay2DMethod method = GC_DELAUNAY_MERGE_DEPTH);

// Generating triangulation halfedges and triangles into new big arrays allowing the original points to be altered.

GC_API bool gcDelaunay2DFast (gcVertex2D* points[], int size, gcHalfEdge2D** hEdges[], gcTriangle2D** triangles[], int &numHEdges, int &numTriangles, int &numUsedPoints, GCDelaunay2DMethod method = GC_DELAUNAY_MERGE_DEPTH);
GC_API bool gcDelaunay2DFast (gcVertex2D* points[], int firstPoint, int lastPoint, gcHalfEdge2D** hEdges[], gcTriangle2D** triangles[], int &numHEdges, int &numTriangles, int &numUsedPoints, GCDelaunay2DMethod method = GC_DELAUNAY_MERGE_DEPTH);

// Step-by-step triangulation calculation (mainly for demo and debug purposes).

GC_API void gcDelaunay2DStartStep (gcVertex2D* points[], int size, GCDelaunay2DMethod method = GC_DELAUNAY_SELECTION_HALFEDGES);
GC_API void gcDelaunay2DStartStep (gcVertex2D* points[], int firstPoint, int lastPoint, GCDelaunay2DMethod method = GC_DELAUNAY_SELECTION_HALFEDGES);
GC_API bool gcDelaunay2DContinue  (int &outputHEdgesSize, int &outputTrianglesSize, int &firstHotHEdge, int &firstHotTriangle);

GC_API gcHalfEdge2D** gcDelaunay2DGetStepHEdges    ();
GC_API gcTriangle2D** gcDelaunay2DGetStepTriangles ();

// Data structure conversion.

GC_API void gcDelaunay2DGenerateTrianglesFromHEdges (gcHalfEdge2D* hEdges[], int numHEdges, gcTriangle2D* triangles[], int &numTriangles);

//---------------------------//
// method-Specific Functions //
//---------------------------//

// Triangle Selection (triangles only).

GC_API void gcDelaunay2DTriSelectionNewTriangle    (gcTriangle2D* triangles[], int &firstHotTriangle, int &lastTriangle, gcVertex2D* curEdgeStart, gcVertex2D* curEdgeEnd, gcVertex2D* curEdgeOpposite, gcVertex2D* nextPoint, int numHotEdges);
GC_API int  gcDelaunay2DTriSelectionTestTriangle   (const gcVertex2D *p1, const gcVertex2D *p2, gcTriangle2D* triangles[], int firstHotTriangle, int lastTriangle);
GC_API void gcDelaunay2DTriSelectionLinkTriangle   (gcVertex2D *p1, gcVertex2D *p2, gcTriangle2D* triangles[], int &firstHotTriangle, int &lastTriangle, gcTriangle2D* newTriangle);
GC_API int  gcDelaunay2DTriSelectionFirstCandidate (gcVertex2D* points[], int firstPoint, int lastPoint, gcVertex2D* curEdgeStart, gcVertex2D* curEdgeEnd);
GC_API int  gcDelaunay2DTriSelectionThirdVertex    (gcVertex2D* points[], int firstPoint, int lastPoint, gcVertex2D* curEdgeStart, gcVertex2D* curEdgeEnd);
GC_API bool gcDelaunay2DTriSelectionStep           (gcVertex2D* points[], int firstPoint, int lastPoint, gcTriangle2D* triangles[], int firstTriangle, int &firstHotTriangle, int &lastTriangle);
GC_API bool gcDelaunay2DTriSelection               (gcVertex2D* points[], int firstPoint, int lastPoint, gcTriangle2D* triangles[], int &numTriangles, int &numUsedPoints);

// HalfEdge Selection (halfedges and optionally triangles).

GC_API void gcDelaunay2DHESelectionLinkHull       (gcHalfEdge2D* firstHEdge);
GC_API void gcDelaunay2DHESelectionNewTriangle    (gcHalfEdge2D* hEdges[], int &firstHotHEdge, int &lastHEdge, gcTriangle2D* triangles[], int &numTriangles, gcVertex2D* nextPoint);
GC_API int  gcDelaunay2DHESelectionTestHEdge      (const gcVertex2D *p1, const gcVertex2D *p2, gcHalfEdge2D* hEdges[], int firstHotHEdge, int lastHEdge);
GC_API void gcDelaunay2DHESelectionNewEdge        (gcVertex2D *p1, gcVertex2D *p2, gcHalfEdge2D* hEdges[], int &firstHotHEdge, int &lastHEdge, gcTriangle2D* newTriangle);
GC_API int  gcDelaunay2DHESelectionFirstCandidate (gcVertex2D* points[], int firstPoint, int lastPoint, gcVertex2D* curEdgeStart, gcVertex2D* curEdgeEnd);
GC_API int  gcDelaunay2DHESelectionThirdVertex    (gcVertex2D* points[], int firstPoint, int lastPoint, gcVertex2D* curEdgeStart, gcVertex2D* curEdgeEnd);
GC_API bool gcDelaunay2DHESelectionStep           (gcVertex2D* points[], int firstPoint, int lastPoint, gcHalfEdge2D* hEdges[], int firstHEdge, int &firstHotHEdge, int &lastHEdge, gcTriangle2D* triangles[], int &numTriangles);
GC_API bool gcDelaunay2DHESelection               (gcVertex2D* points[], int firstPoint, int lastPoint, gcHalfEdge2D* hEdges[], gcTriangle2D* triangles[], int &numHEdges, int &numTriangles, int &numUsedPoints);

// Depth and Breadth Merge (halfedges and optionally triangles).

GC_API void gcDelaunay2DMergeBuild       (gcHalfEdge2D* rootHEdges[], int rootsSize, int subSize, gcHalfEdge2D* hEdges[], int &numHEdges);
GC_API void gcDelaunay2DMergeMerge       (gcVertex2D* points[], int firstPointL, int lastPointL, gcHalfEdge2D* leftCCWHEdgeL, gcHalfEdge2D* rightCWHEdgeL, int firstPointR, int lastPointR, gcHalfEdge2D* leftCCWHEdgeR, gcHalfEdge2D* rightCWHEdgeR, gcHalfEdge2D*& leftCCWHEdge, gcHalfEdge2D*& rightCWHEdge);
GC_API void gcDelaunay2DMerge3Point      (gcVertex2D* points[], int firstPoint, int lastPoint, gcHalfEdge2D*& leftCCWHEdge, gcHalfEdge2D*& rightCWHEdge);
GC_API void gcDelaunay2DMerge2Point      (gcVertex2D* points[], int firstPoint, int lastPoint, gcHalfEdge2D*& leftCCWHEdge, gcHalfEdge2D*& rightCWHEdge);
GC_API void gcDelaunay2DMergeStepBreadth (gcVertex2D* points[], int firstPoint, int lastPoint, int halfSize, gcHalfEdge2D* leftCCWHEdges[], gcHalfEdge2D* rightCWHEdges[]);
GC_API void gcDelaunay2DMergeStepDepth   (gcVertex2D* points[], int firstPoint, int lastPoint, gcHalfEdge2D*& leftCCWHEdge, gcHalfEdge2D*& rightCWHEdge);
GC_API bool gcDelaunay2DMergeBreadth     (gcVertex2D* points[], int firstPoint, int lastPoint, gcHalfEdge2D* hEdges[], gcTriangle2D* triangles[], int &numHEdges, int &numTriangles, int &numUsedPoints);
GC_API bool gcDelaunay2DMergeDepth       (gcVertex2D* points[], int firstPoint, int lastPoint, gcHalfEdge2D* hEdges[], gcTriangle2D* triangles[], int &numHEdges, int &numTriangles, int &numUsedPoints);

//----------------------//
// Validation Functions //
//----------------------//

GC_API bool gcDelaunay2DValidate (gcHalfEdge2D* hEdges[], int firstHEdge, int lastHEdge, int numPoints);
GC_API bool gcDelaunay2DValidate (gcTriangle2D* triangles[], int firstTriangle, int lastTriangle, int numPoints, bool checkNeighbors = false);

#endif // GC_DELAUNAY_TRIANGULATION_2D_H
