/*
 * vrbase
 * Copyright 2007-2009 CENPES/Petrobras Tecgraf/PUC-Rio
 */

#ifndef _VR_UUID_H_
#define _VR_UUID_H_

#include "String.h"
#include "CryptoHash.h"

//! Main namespace of this library.
namespace vr {

/*!
    \brief The Uuid class stores a Universally Unique Identifier (UUID).

    Using Universally Unique IDentifiers (UUID) is a standard way to uniquely identify entities in a distributed
    computing environment. A UUID is a 16-byte (128-bit) number generated by some algorithm that is meant to
    guarantee that the UUID will be unique in the distributed computing environment where it is used. The acronym
    GUID is often used instead, Globally Unique IDentifiers, but it refers to the same thing. The GUID is one variant
    of UUID. Multiple variants are in use. Each UUID contains a bit field that specifies which type (variant) of UUID.
    This class follow the DCE (Distributed Computing Environment) scheme defined by the Network Working Group UUID
    Specification (see the RFC at http://www.ietf.org/rfc/rfc4122.txt ).
 */
class VRBASE_EXPORT Uuid
{
public:
    //! This enum defines the values used in the version field of the UUID according to the DCE scheme.
    enum Version
    {
        VerUnknown = -1,    //!< Version is unknown because the Uuid is Null
        Md5         = 3,    //!< MD5-based, by using a scheme with MD5 hashing
        Random      = 4,    //!< Random-based, by using random numbers for all sections
        Sha1        = 5     //!< SHA-1-based, by using a scheme with SHA-1 hashing
    };

public:
    //! Creates an Uuid from the given Hash data. The new Uuid has version that corresponds to the given Hash algorithm,
    //! which can be Md5 or Sha1.\see createRandom().
    static Uuid createFromHash( CryptoHash::Result result );

    /*!
        On any platform other than Windows, this function returns a new UUID with version Uuid::Random. The random numbers used
        to construct the UUID are obtained from the local pseudo-random generator, which is usually not a cryptographic quality
        random number generator. Therefore, a UUID generated by this function can't be guaranteed to be unique. \see createFromHash().
     */
    static Uuid createRandom();

public:
    //! Creates the null UUID. toString() will output the null UUID as "{00000000-0000-0000-0000000000000000}".
    Uuid();

    //! Create a Uuid from other.
    Uuid( const Uuid &other );

    /*!
        Creates a UUID with the value specified by the parameters, timeLow, timeMid, timeHiAndVersion, clockSeqHiAndReserved, clockSeqLow
        and node, as specified by the DCE scheme of the Network Working Group.

        Example:
        // {67C8770B-44F1-410A-AB9AF9B5446F13EE}
        Uuid MyInterface( 0x67c8770b, 0x44f1, 0x410a, 0xab, 0x9a, 0xf9, 0xb5, 0x44, 0x6f, 0x13, 0xee )
     */
    Uuid( uint32 timeLow, uint16 timeMid, uint16 timeHiAndVersion, uint8 clockSeqHiAndReserved, uint8 clockSeqLow, uint8 node[6] );

    /*!
        Creates a Uuid object from the string text, which must be formatted as four hex fields separated by '-', e.g.,
        "{xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx}" where 'x' is a hex digit. The curly braces shown here are optional, but it is normal to
        include them. If the conversion fails, a null UUID is created. \see toString().
     */
    Uuid( const String& text );

    //! Returns true if this is the null UUID {00000000-0000-0000-0000000000000000}; Otherwise returns false.
    bool isNull() const;

    //! Set zero to Uuid and make it a Null UUID. \see isNull().
    void clear();

    //! Returns true if this Uuid and the other Uuid are identical; Otherwise returns false.
    inline bool operator == ( const Uuid& other ) const
    {
        return other._data.dwords[0] == _data.dwords[0] &&
               other._data.dwords[1] == _data.dwords[1] &&
               other._data.dwords[2] == _data.dwords[2] &&
               other._data.dwords[3] == _data.dwords[3];
    }
	
    //! Returns true if this Uuid and the other Uuid are NOT identical; Otherwise returns false.
    inline bool operator != ( const Uuid& other ) const
    {
        return !( *this == other );
    }
    
    //! Returns true if this Uuid is 'lesser than' another Uuid.
    inline bool operator < ( const Uuid& other ) const
    {
        return _data.dwords[0] < other._data.dwords[0] ||
			( _data.dwords[0] == other._data.dwords[0] &&
        		( _data.dwords[1] < other._data.dwords[1] ||
					( _data.dwords[1] == other._data.dwords[1] &&
        				( _data.dwords[2] < other._data.dwords[2] ||
							( _data.dwords[2] == other._data.dwords[2] && _data.dwords[3] < other._data.dwords[3] )
        				)
        			)
				)
        	);
    }

    //! Assignment operator. Copies all data from other Uuid to this Uuid.
    Uuid& operator=( const Uuid& other );

    //! Returns the string representation of this Uuid. The string is formatted as four hex fields separated by '-' and enclosed in curly
    //! braces, i.e., "{xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx}" where 'x' is a hex digit.
    void toString( String& res ) const;

    //! Returns the version field of the UUID or Uuid::VerUnknown if it is a Null Uuid.
    int getVersion() const;

private:
    void setVersion( Version version );

private:
    union
    {
        uint32 dwords[4];
        uint8 bytes[16];
        struct
        {
            uint32 timeLow;
            uint16 timeMid;
            uint16 timeHiAndVersion;
            uint8 clockSeqHiAndReserved;
            uint8 clockSeqLow;
            uint8 node[6];
        } dce;
    } _data;
};

} // namespace vr

#endif
